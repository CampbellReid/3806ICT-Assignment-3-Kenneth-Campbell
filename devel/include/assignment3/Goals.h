// Generated by gencpp from file assignment3/Goals.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT3_MESSAGE_GOALS_H
#define ASSIGNMENT3_MESSAGE_GOALS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <assignment3/Goal.h>
#include <assignment3/Goal.h>

namespace assignment3
{
template <class ContainerAllocator>
struct Goals_
{
  typedef Goals_<ContainerAllocator> Type;

  Goals_()
    : primary_goals()
    , secondary_goals()  {
    }
  Goals_(const ContainerAllocator& _alloc)
    : primary_goals(_alloc)
    , secondary_goals(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::assignment3::Goal_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::assignment3::Goal_<ContainerAllocator> >> _primary_goals_type;
  _primary_goals_type primary_goals;

   typedef std::vector< ::assignment3::Goal_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::assignment3::Goal_<ContainerAllocator> >> _secondary_goals_type;
  _secondary_goals_type secondary_goals;





  typedef boost::shared_ptr< ::assignment3::Goals_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment3::Goals_<ContainerAllocator> const> ConstPtr;

}; // struct Goals_

typedef ::assignment3::Goals_<std::allocator<void> > Goals;

typedef boost::shared_ptr< ::assignment3::Goals > GoalsPtr;
typedef boost::shared_ptr< ::assignment3::Goals const> GoalsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment3::Goals_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment3::Goals_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignment3::Goals_<ContainerAllocator1> & lhs, const ::assignment3::Goals_<ContainerAllocator2> & rhs)
{
  return lhs.primary_goals == rhs.primary_goals &&
    lhs.secondary_goals == rhs.secondary_goals;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignment3::Goals_<ContainerAllocator1> & lhs, const ::assignment3::Goals_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignment3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignment3::Goals_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment3::Goals_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment3::Goals_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment3::Goals_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment3::Goals_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment3::Goals_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment3::Goals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b0a5f299fb224ecfcef24f4184c3f6d";
  }

  static const char* value(const ::assignment3::Goals_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b0a5f299fb224ecULL;
  static const uint64_t static_value2 = 0xfcef24f4184c3f6dULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment3::Goals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment3/Goals";
  }

  static const char* value(const ::assignment3::Goals_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment3::Goals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Goal[] primary_goals\n"
"Goal[] secondary_goals\n"
"\n"
"================================================================================\n"
"MSG: assignment3/Goal\n"
"string description\n"
"int32 priority\n"
"geometry_msgs/Point[] waypoints\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::assignment3::Goals_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment3::Goals_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.primary_goals);
      stream.next(m.secondary_goals);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Goals_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment3::Goals_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment3::Goals_<ContainerAllocator>& v)
  {
    s << indent << "primary_goals[]" << std::endl;
    for (size_t i = 0; i < v.primary_goals.size(); ++i)
    {
      s << indent << "  primary_goals[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::assignment3::Goal_<ContainerAllocator> >::stream(s, indent + "    ", v.primary_goals[i]);
    }
    s << indent << "secondary_goals[]" << std::endl;
    for (size_t i = 0; i < v.secondary_goals.size(); ++i)
    {
      s << indent << "  secondary_goals[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::assignment3::Goal_<ContainerAllocator> >::stream(s, indent + "    ", v.secondary_goals[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT3_MESSAGE_GOALS_H
