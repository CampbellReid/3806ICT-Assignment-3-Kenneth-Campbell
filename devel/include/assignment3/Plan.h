// Generated by gencpp from file assignment3/Plan.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT3_MESSAGE_PLAN_H
#define ASSIGNMENT3_MESSAGE_PLAN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <assignment3/Waypoint.h>

namespace assignment3
{
template <class ContainerAllocator>
struct Plan_
{
  typedef Plan_<ContainerAllocator> Type;

  Plan_()
    : waypoints()  {
    }
  Plan_(const ContainerAllocator& _alloc)
    : waypoints(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::assignment3::Waypoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::assignment3::Waypoint_<ContainerAllocator> >> _waypoints_type;
  _waypoints_type waypoints;





  typedef boost::shared_ptr< ::assignment3::Plan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment3::Plan_<ContainerAllocator> const> ConstPtr;

}; // struct Plan_

typedef ::assignment3::Plan_<std::allocator<void> > Plan;

typedef boost::shared_ptr< ::assignment3::Plan > PlanPtr;
typedef boost::shared_ptr< ::assignment3::Plan const> PlanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment3::Plan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment3::Plan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignment3::Plan_<ContainerAllocator1> & lhs, const ::assignment3::Plan_<ContainerAllocator2> & rhs)
{
  return lhs.waypoints == rhs.waypoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignment3::Plan_<ContainerAllocator1> & lhs, const ::assignment3::Plan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignment3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignment3::Plan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment3::Plan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment3::Plan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment3::Plan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment3::Plan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment3::Plan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment3::Plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad845bc5f5576ca4f988307129e2452d";
  }

  static const char* value(const ::assignment3::Plan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad845bc5f5576ca4ULL;
  static const uint64_t static_value2 = 0xf988307129e2452dULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment3::Plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment3/Plan";
  }

  static const char* value(const ::assignment3::Plan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment3::Plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Waypoint[] waypoints\n"
"\n"
"================================================================================\n"
"MSG: assignment3/Waypoint\n"
"geometry_msgs/Point position\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::assignment3::Plan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment3::Plan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Plan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment3::Plan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment3::Plan_<ContainerAllocator>& v)
  {
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::assignment3::Waypoint_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT3_MESSAGE_PLAN_H
