// Generated by gencpp from file assignment3/CollectDataResponse.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT3_MESSAGE_COLLECTDATARESPONSE_H
#define ASSIGNMENT3_MESSAGE_COLLECTDATARESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <assignment3/SensorData.h>

namespace assignment3
{
template <class ContainerAllocator>
struct CollectDataResponse_
{
  typedef CollectDataResponse_<ContainerAllocator> Type;

  CollectDataResponse_()
    : data()  {
    }
  CollectDataResponse_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::assignment3::SensorData_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::assignment3::CollectDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment3::CollectDataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CollectDataResponse_

typedef ::assignment3::CollectDataResponse_<std::allocator<void> > CollectDataResponse;

typedef boost::shared_ptr< ::assignment3::CollectDataResponse > CollectDataResponsePtr;
typedef boost::shared_ptr< ::assignment3::CollectDataResponse const> CollectDataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment3::CollectDataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment3::CollectDataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignment3::CollectDataResponse_<ContainerAllocator1> & lhs, const ::assignment3::CollectDataResponse_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignment3::CollectDataResponse_<ContainerAllocator1> & lhs, const ::assignment3::CollectDataResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignment3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignment3::CollectDataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment3::CollectDataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment3::CollectDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment3::CollectDataResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment3::CollectDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment3::CollectDataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment3::CollectDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b05c236c4d2e3f6f6d7b02102165372";
  }

  static const char* value(const ::assignment3::CollectDataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b05c236c4d2e3f6ULL;
  static const uint64_t static_value2 = 0xf6d7b02102165372ULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment3::CollectDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment3/CollectDataResponse";
  }

  static const char* value(const ::assignment3::CollectDataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment3::CollectDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SensorData data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: assignment3/SensorData\n"
"geometry_msgs/Point position\n"
"float32 speed\n"
"Obstacle[] obstacles\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: assignment3/Obstacle\n"
"geometry_msgs/Point position\n"
"float32 size\n"
;
  }

  static const char* value(const ::assignment3::CollectDataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment3::CollectDataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CollectDataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment3::CollectDataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment3::CollectDataResponse_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    s << std::endl;
    Printer< ::assignment3::SensorData_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT3_MESSAGE_COLLECTDATARESPONSE_H
