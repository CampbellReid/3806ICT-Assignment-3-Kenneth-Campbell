// Generated by gencpp from file assignment3/Goal.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT3_MESSAGE_GOAL_H
#define ASSIGNMENT3_MESSAGE_GOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace assignment3
{
template <class ContainerAllocator>
struct Goal_
{
  typedef Goal_<ContainerAllocator> Type;

  Goal_()
    : description()
    , priority(0)
    , waypoints()  {
    }
  Goal_(const ContainerAllocator& _alloc)
    : description(_alloc)
    , priority(0)
    , waypoints(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _description_type;
  _description_type description;

   typedef int32_t _priority_type;
  _priority_type priority;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _waypoints_type;
  _waypoints_type waypoints;





  typedef boost::shared_ptr< ::assignment3::Goal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment3::Goal_<ContainerAllocator> const> ConstPtr;

}; // struct Goal_

typedef ::assignment3::Goal_<std::allocator<void> > Goal;

typedef boost::shared_ptr< ::assignment3::Goal > GoalPtr;
typedef boost::shared_ptr< ::assignment3::Goal const> GoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment3::Goal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment3::Goal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignment3::Goal_<ContainerAllocator1> & lhs, const ::assignment3::Goal_<ContainerAllocator2> & rhs)
{
  return lhs.description == rhs.description &&
    lhs.priority == rhs.priority &&
    lhs.waypoints == rhs.waypoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignment3::Goal_<ContainerAllocator1> & lhs, const ::assignment3::Goal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignment3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignment3::Goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment3::Goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment3::Goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment3::Goal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment3::Goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment3::Goal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment3::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1536c8d5a376720204f5d100ab20ac1d";
  }

  static const char* value(const ::assignment3::Goal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1536c8d5a3767202ULL;
  static const uint64_t static_value2 = 0x04f5d100ab20ac1dULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment3::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment3/Goal";
  }

  static const char* value(const ::assignment3::Goal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment3::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string description\n"
"int32 priority\n"
"geometry_msgs/Point[] waypoints\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::assignment3::Goal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment3::Goal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.description);
      stream.next(m.priority);
      stream.next(m.waypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Goal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment3::Goal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment3::Goal_<ContainerAllocator>& v)
  {
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.description);
    s << indent << "priority: ";
    Printer<int32_t>::stream(s, indent + "  ", v.priority);
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT3_MESSAGE_GOAL_H
