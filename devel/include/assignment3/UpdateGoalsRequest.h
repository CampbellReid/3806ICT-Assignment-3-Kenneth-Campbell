// Generated by gencpp from file assignment3/UpdateGoalsRequest.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT3_MESSAGE_UPDATEGOALSREQUEST_H
#define ASSIGNMENT3_MESSAGE_UPDATEGOALSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <assignment3/Feedback.h>

namespace assignment3
{
template <class ContainerAllocator>
struct UpdateGoalsRequest_
{
  typedef UpdateGoalsRequest_<ContainerAllocator> Type;

  UpdateGoalsRequest_()
    : feedback()  {
    }
  UpdateGoalsRequest_(const ContainerAllocator& _alloc)
    : feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::assignment3::Feedback_<ContainerAllocator>  _feedback_type;
  _feedback_type feedback;





  typedef boost::shared_ptr< ::assignment3::UpdateGoalsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment3::UpdateGoalsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UpdateGoalsRequest_

typedef ::assignment3::UpdateGoalsRequest_<std::allocator<void> > UpdateGoalsRequest;

typedef boost::shared_ptr< ::assignment3::UpdateGoalsRequest > UpdateGoalsRequestPtr;
typedef boost::shared_ptr< ::assignment3::UpdateGoalsRequest const> UpdateGoalsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment3::UpdateGoalsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment3::UpdateGoalsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignment3::UpdateGoalsRequest_<ContainerAllocator1> & lhs, const ::assignment3::UpdateGoalsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.feedback == rhs.feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignment3::UpdateGoalsRequest_<ContainerAllocator1> & lhs, const ::assignment3::UpdateGoalsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignment3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignment3::UpdateGoalsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment3::UpdateGoalsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment3::UpdateGoalsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment3::UpdateGoalsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment3::UpdateGoalsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment3::UpdateGoalsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment3::UpdateGoalsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a18a644baec791a43483fe444dc46d5";
  }

  static const char* value(const ::assignment3::UpdateGoalsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a18a644baec791aULL;
  static const uint64_t static_value2 = 0x43483fe444dc46d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment3::UpdateGoalsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment3/UpdateGoalsRequest";
  }

  static const char* value(const ::assignment3::UpdateGoalsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment3::UpdateGoalsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Feedback feedback\n"
"\n"
"================================================================================\n"
"MSG: assignment3/Feedback\n"
"bool action_success\n"
;
  }

  static const char* value(const ::assignment3::UpdateGoalsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment3::UpdateGoalsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdateGoalsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment3::UpdateGoalsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment3::UpdateGoalsRequest_<ContainerAllocator>& v)
  {
    s << indent << "feedback: ";
    s << std::endl;
    Printer< ::assignment3::Feedback_<ContainerAllocator> >::stream(s, indent + "  ", v.feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT3_MESSAGE_UPDATEGOALSREQUEST_H
