// Generated by gencpp from file assignment1_setup/ModelStateResponse.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT1_SETUP_MESSAGE_MODELSTATERESPONSE_H
#define ASSIGNMENT1_SETUP_MESSAGE_MODELSTATERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>

namespace assignment1_setup
{
template <class ContainerAllocator>
struct ModelStateResponse_
{
  typedef ModelStateResponse_<ContainerAllocator> Type;

  ModelStateResponse_()
    : header()
    , location()
    , covariance()
    , success(false)
    , status_message()  {
    }
  ModelStateResponse_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , location(_alloc)
    , covariance(_alloc)
    , success(false)
    , status_message(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _location_type;
  _location_type location;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _covariance_type;
  _covariance_type covariance;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _status_message_type;
  _status_message_type status_message;





  typedef boost::shared_ptr< ::assignment1_setup::ModelStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment1_setup::ModelStateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ModelStateResponse_

typedef ::assignment1_setup::ModelStateResponse_<std::allocator<void> > ModelStateResponse;

typedef boost::shared_ptr< ::assignment1_setup::ModelStateResponse > ModelStateResponsePtr;
typedef boost::shared_ptr< ::assignment1_setup::ModelStateResponse const> ModelStateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment1_setup::ModelStateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment1_setup::ModelStateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignment1_setup::ModelStateResponse_<ContainerAllocator1> & lhs, const ::assignment1_setup::ModelStateResponse_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.location == rhs.location &&
    lhs.covariance == rhs.covariance &&
    lhs.success == rhs.success &&
    lhs.status_message == rhs.status_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignment1_setup::ModelStateResponse_<ContainerAllocator1> & lhs, const ::assignment1_setup::ModelStateResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignment1_setup

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignment1_setup::ModelStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment1_setup::ModelStateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment1_setup::ModelStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment1_setup::ModelStateResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment1_setup::ModelStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment1_setup::ModelStateResponse_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment1_setup::ModelStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62bdec03e9c27985cd2c0808e297c5db";
  }

  static const char* value(const ::assignment1_setup::ModelStateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62bdec03e9c27985ULL;
  static const uint64_t static_value2 = 0xcd2c0808e297c5dbULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment1_setup::ModelStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment1_setup/ModelStateResponse";
  }

  static const char* value(const ::assignment1_setup::ModelStateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment1_setup::ModelStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header                        # Standard metadata for higher-level stamped data types.\n"
"                                     # * header.seq holds the number of requests since the plugin started\n"
"                                     # * header.stamp timestamp related to the pose\n"
"                                     # * header.frame_id not used but currently filled with the relative_entity_name\n"
"geometry_msgs/Point location         # The position of the robot\n"
"geometry_msgs/Vector3[] covariance   # The covariance matrix [[XX, XY, XZ], [YX, YY, YZ], [ZX, ZY, ZZ]]\n"
"bool success                         # return true if successful\n"
"string status_message                # comments if available\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::assignment1_setup::ModelStateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment1_setup::ModelStateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.location);
      stream.next(m.covariance);
      stream.next(m.success);
      stream.next(m.status_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModelStateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment1_setup::ModelStateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment1_setup::ModelStateResponse_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "location: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.covariance[i]);
    }
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "status_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.status_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT1_SETUP_MESSAGE_MODELSTATERESPONSE_H
