// Generated by gencpp from file assignment1_setup/Sonars.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT1_SETUP_MESSAGE_SONARS_H
#define ASSIGNMENT1_SETUP_MESSAGE_SONARS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace assignment1_setup
{
template <class ContainerAllocator>
struct Sonars_
{
  typedef Sonars_<ContainerAllocator> Type;

  Sonars_()
    : distance0(0)
    , distance1(0)
    , distance2(0)  {
    }
  Sonars_(const ContainerAllocator& _alloc)
    : distance0(0)
    , distance1(0)
    , distance2(0)  {
  (void)_alloc;
    }



   typedef uint16_t _distance0_type;
  _distance0_type distance0;

   typedef uint16_t _distance1_type;
  _distance1_type distance1;

   typedef uint16_t _distance2_type;
  _distance2_type distance2;





  typedef boost::shared_ptr< ::assignment1_setup::Sonars_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment1_setup::Sonars_<ContainerAllocator> const> ConstPtr;

}; // struct Sonars_

typedef ::assignment1_setup::Sonars_<std::allocator<void> > Sonars;

typedef boost::shared_ptr< ::assignment1_setup::Sonars > SonarsPtr;
typedef boost::shared_ptr< ::assignment1_setup::Sonars const> SonarsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment1_setup::Sonars_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment1_setup::Sonars_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignment1_setup::Sonars_<ContainerAllocator1> & lhs, const ::assignment1_setup::Sonars_<ContainerAllocator2> & rhs)
{
  return lhs.distance0 == rhs.distance0 &&
    lhs.distance1 == rhs.distance1 &&
    lhs.distance2 == rhs.distance2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignment1_setup::Sonars_<ContainerAllocator1> & lhs, const ::assignment1_setup::Sonars_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignment1_setup

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignment1_setup::Sonars_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment1_setup::Sonars_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment1_setup::Sonars_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment1_setup::Sonars_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment1_setup::Sonars_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment1_setup::Sonars_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment1_setup::Sonars_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5579dba5245fa13e51014a8affff95eb";
  }

  static const char* value(const ::assignment1_setup::Sonars_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5579dba5245fa13eULL;
  static const uint64_t static_value2 = 0x51014a8affff95ebULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment1_setup::Sonars_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment1_setup/Sonars";
  }

  static const char* value(const ::assignment1_setup::Sonars_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment1_setup::Sonars_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 distance0\n"
"uint16 distance1\n"
"uint16 distance2\n"
;
  }

  static const char* value(const ::assignment1_setup::Sonars_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment1_setup::Sonars_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance0);
      stream.next(m.distance1);
      stream.next(m.distance2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sonars_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment1_setup::Sonars_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment1_setup::Sonars_<ContainerAllocator>& v)
  {
    s << indent << "distance0: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.distance0);
    s << indent << "distance1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.distance1);
    s << indent << "distance2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.distance2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT1_SETUP_MESSAGE_SONARS_H
